# API Documentation for CVE Management System

## Base URL
```
http://localhost:5000
```

## 1. Fetch All CVEs
### Endpoint
```
GET /api/cves
```
### Description
Retrieves a list of all stored CVEs.
### Response
```json
[
  {
    "cve_id": "CVE-2024-1234",
    "identifier": "nist.example",
    "cvss_score": 7.8,
    "published_date": "2024-02-01",
    "last_modified_date": "2024-02-10",
    "status": "Analyzed"
  }
]
```

## 2. Fetch a Specific CVE by ID
### Endpoint
```
GET /cves/<cve_id>
```
### Description
Retrieves details of a specific CVE based on its ID.
### Parameters
- `cve_id` (string) - The unique identifier of the CVE.
### Response
```html
Rendered HTML page with detailed CVE information.
```
If the CVE is not found:
```html
Rendered error page with "CVE Not Found" message.
```

## 3. Fetch Paginated CVE List
### Endpoint
```
GET /cves/list
```
### Description
Fetches a paginated list of CVEs with sorting options.
### Query Parameters
- `page` (int) - The page number (default: 1)
- `per_page` (int) - Number of records per page (default: 10)
- `sort` (string) - Sorting order (`asc` or `desc`, default: `desc`)
### Response
```html
Rendered HTML page with paginated CVE records.
```

## 4. Fetch and Store CVE Data from NVD API (Internal Function)
### Function
```
fetch_and_store_cve()
```
### Description
Fetches CVE data from the NVD API and stores it in the database.
This function runs internally and is not exposed via an API.

## Database Table (`cve_data`)
The CVE data is stored in a MySQL database with the following fields:
```
- cve_id (VARCHAR)
- description (TEXT)
- identifier (VARCHAR)
- cvss_score (FLOAT)
- published_date (DATETIME)
- last_modified_date (DATETIME)
- status (VARCHAR)
- severity (VARCHAR)
- score (FLOAT)
- vector_string (VARCHAR)
- access_vector (VARCHAR)
- access_complexity (VARCHAR)
- authentication (VARCHAR)
- confidentiality_impact (VARCHAR)
- integrity_impact (VARCHAR)
- availability_impact (VARCHAR)
- exploitability_score (FLOAT)
- impact_score (FLOAT)
- vulnerable (BOOLEAN)
- criteria (VARCHAR)
- match_criteria_id (VARCHAR)
```

## Error Handling
- If a CVE ID is not found, an error page is displayed.
- If API calls fail, retries are attempted with a delay.

## Running the Application
Start the Flask server using:
```
python app.py
```

